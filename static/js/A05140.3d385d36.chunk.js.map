{"version":3,"file":"static/js/A05140.3d385d36.chunk.js","mappings":"qSAkCA,GA9BoBA,EAAAA,EAAAA,OAAK,YAAuC,IAApCC,EAAQ,EAARA,SAAUC,EAAQ,EAARA,SAAaC,GAAK,YACtD,GAAwBC,EAAAA,EAAAA,WAAS,GAAM,eAAhCC,EAAI,KAAEC,EAAO,KAapB,OACE,iBAAKC,UAAU,eAAc,WAC3B,iBAAMA,UAAU,OAAOC,QAAS,kBAdvB,SAACC,GACZ,IAAMC,EAAKC,SAASC,cAAc,YAClCF,EAAGG,MAAQJ,EACXE,SAASG,KAAKC,YAAYL,GAC1BA,EAAGM,SACHL,SAASM,YAAY,QACrBN,SAASG,KAAKI,YAAYR,GAC1BJ,GAAQ,GACRa,YAAW,WACTb,GAAQ,EACV,GAAG,IACL,CAG0Cc,CAAKC,OAAOnB,GAAU,EAAC,SAC1DG,EAAO,iCAAU,kBAEpB,SAAC,KAAiB,QAChBH,SAAUmB,OAAOnB,GAAUoB,QAAQ,MAAO,IAC1CrB,SAAUA,EACVM,UAAU,UACVgB,OAAO,OACHpB,MAIZ,I,iECgBA,MAtCA,SAAgB,GAAU,IAARqB,EAAG,EAAHA,IAChB,GAA4BpB,EAAAA,EAAAA,UAAS,IAAG,eAAjCqB,EAAM,KAAEC,EAAS,KAQxB,OAPAC,EAAAA,EAAAA,YAAU,WACRC,MAAMJ,GACHK,MAAK,SAACC,GAAQ,OAAKA,EAASrB,MAAM,IAClCoB,MAAK,SAACpB,GACLiB,EAAUjB,EACZ,GACJ,GAAG,CAACe,KAEF,gBAAKjB,UAAU,gBAAe,UAC5B,SAAC,IAAa,CACZL,SAAUuB,EACVM,cAAe,CAACC,EAAAA,GAChBC,cAAe,CAACC,EAAAA,GAChBC,WAAY,CACVC,KAAI,YAAO,EAAJC,KAAgD,IAA1CC,EAAM,EAANA,OAAQ/B,EAAS,EAATA,UAAWL,EAAQ,EAARA,SAAaC,GAAK,YAC1CoC,EAAQ,iBAAiBC,KAAKjC,GAAa,IACjD,OAAQ+B,GAAUC,GAChB,SAAC,GAAiB,QAChBrC,SAAUmB,OAAOnB,GAAUoB,QAAQ,MAAO,IAC1CrB,SAAUsC,EAAM,GAChBhC,UAAU,UACVgB,OAAO,OACHpB,KAGN,iCAAMI,UAAWA,GAAeJ,GAAK,aAClCD,IAGP,MAKV,C,0JCtCA,MAJA,WACE,OAAO,SAAC,IAAQ,CAACsB,IAAKiB,GACxB,C","sources":["components/markdown/highLighter.jsx","components/markdown/index.jsx","dynamic/pages/前端知识体系(全面)/前端路由/hash.jsx"],"sourcesContent":["import React, { memo, useState } from \"react\";\nimport { Prism as SyntaxHighlighter } from \"react-syntax-highlighter\";\nimport \"./index.less\";\n\nconst Highlighter = memo(({ language, children, ...props }) => {\n  const [show, setShow] = useState(false);\n  const copy = (text) => {\n    const el = document.createElement(\"textarea\");\n    el.value = text;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand(\"copy\");\n    document.body.removeChild(el);\n    setShow(true);\n    setTimeout(() => {\n      setShow(false);\n    }, 1000);\n  };\n  return (\n    <div className=\"high-lighter\">\n      <span className=\"copy\" onClick={() => copy(String(children))}>\n        {show ? \"复制成功！\" : \"复制\"}\n      </span>\n      <SyntaxHighlighter\n        children={String(children).replace(/\\n$/, \"\")}\n        language={language}\n        className=\"my-code\"\n        PreTag=\"div\"\n        {...props}\n      />\n    </div>\n  );\n});\n\nexport default Highlighter;\n","import React, { useState, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport SyntaxHighlighter from \"./highLighter\";\nimport rehypeRaw from \"rehype-raw\";\n// import { tomorrow } from \"react-syntax-highlighter/dist/esm/styles/prism\";\nimport \"github-markdown-css\";\n\nimport \"./index.less\";\n\nfunction Shapes({ src }) {\n  const [mdText, setMdText] = useState(\"\");\n  useEffect(() => {\n    fetch(src)\n      .then((response) => response.text())\n      .then((text) => {\n        setMdText(text);\n      });\n  }, [src]);\n  return (\n    <div className=\"markdown-body\">\n      <ReactMarkdown\n        children={mdText}\n        rehypePlugins={[rehypeRaw]}\n        remarkPlugins={[remarkGfm]}\n        components={{\n          code({ node, inline, className, children, ...props }) {\n            const match = /language-(\\w+)/.exec(className || \"\");\n            return !inline && match ? (\n              <SyntaxHighlighter\n                children={String(children).replace(/\\n$/, \"\")}\n                language={match[1]}\n                className=\"my-code\"\n                PreTag=\"div\"\n                {...props}\n              />\n            ) : (\n              <code className={className} {...props}>\n                {children}\n              </code>\n            );\n          },\n        }}\n      />\n    </div>\n  );\n}\n\nexport default Shapes;\n","import React from \"react\";\nimport MarkDown from \"@/components/markdown\";\nimport shape from \"@docs/前端知识体系(全面)/前端路由/hash.md\";\n\nfunction Index() {\n  return <MarkDown src={shape} />;\n}\n\nexport default Index;"],"names":["memo","language","children","props","useState","show","setShow","className","onClick","text","el","document","createElement","value","body","appendChild","select","execCommand","removeChild","setTimeout","copy","String","replace","PreTag","src","mdText","setMdText","useEffect","fetch","then","response","rehypePlugins","rehypeRaw","remarkPlugins","remarkGfm","components","code","node","inline","match","exec","shape"],"sourceRoot":""}